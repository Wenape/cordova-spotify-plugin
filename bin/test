#!/usr/bin/env node

var cordova = require('cordova')
  , fs = require('fs')
  , path = require('path')
  , shell = require('shelljs')
  , temp = require('temp');

temp.track();

var old_log = console.log;

var pluginDir = path.join(__dirname, '..')
  , tmpDir = temp.mkdirSync()
  , wwwDir = path.join(tmpDir, 'www');

console.log('Temp dir: %s', tmpDir);

cordova.raw.create(tmpDir)
  .then(function() {

    shell.rm('-rf', path.join(wwwDir, '*'));
    shell.cp('-rf', path.join(pluginDir, 'test', 'js', '*'), wwwDir);
    shell.mkdir('-p', path.join(wwwDir, 'support', '{chai,mocha}'));
    shell.cp('-rf', path.join(pluginDir, 'node_modules', 'mocha', '*'), path.join(wwwDir, 'support', 'mocha'));
    shell.cp('-rf', path.join(pluginDir, 'node_modules', 'chai', '*'), path.join(wwwDir, 'support', 'chai'));
    shell.cp('-rf', path.join(pluginDir, 'node_modules', 'sinon-chai', 'lib', '*'), path.join(wwwDir, 'support', 'sinon-chai'));
    shell.cp('-rf', path.join(pluginDir, 'node_modules', 'sinon', 'pkg', 'sinon.js'), path.join(wwwDir, 'support', 'sinon'));
    shell.cd(tmpDir);
  })
  .then(function() {
    return cordova.raw.plugin('add', pluginDir);
  })
  .then(function() {
    shell.cp('-rf', path.join(pluginDir, 'development', 'Spotify.framework'), path.join(tmpDir, 'plugins', 'com.timflapper.spotify', 'src', 'ios'));
    return cordova.raw.platform('add', 'ios');
  })
  .then(function() {
    console.log = function() { };
    return cordova.raw.serve();
  })
  .then(function(server) {
    shell.cd(pluginDir);
    shell.exec('./node_modules/.bin/mocha-phantomjs http://localhost:8000/ios/www/', function(code, output) {
      console.log = old_log;

      server.close();

      process.exit(code);
    });
  });
